[{"name": "app.py", "content": "from shiny import App, ui, render\nimport plotnine as gg\nfrom plotnine.data import diamonds\nimport pandas as pd\n\n# function that creates our UI based on the data\n# we give it\ndef create_ui(data: pd.DataFrame):\n  # calculate the set of unique choices that could be made\n  choices = data['color'].unique()\n  # create our ui object\n  app_ui = ui.page_fluid(\n    # row and column here are functions\n    # to aid laying out our page in an organised fashion\n    ui.row(\n      ui.column(2, offset=1,*[\n        # an input widget that allows us to select multiple values\n        # from the set of choices\n        ui.input_selectize(\n          \"select\", \"Color\",\n          choices=list(choices),\n          multiple=True\n        )]\n      ),\n      ui.column(1),\n      ui.column(6,\n        # an output container in which to render a plot\n        ui.output_plot(\"out\")\n      )\n    )\n  )\n  return app_ui\n\nfrontend = create_ui(diamonds)\n\n# utility function to draw a scatter plot\ndef create_plot(data):\n  plot = (\n    gg.ggplot(data, gg.aes(x = 'carat', y='price', color='color')) + \n      gg.geom_point()\n  )\n  return plot.draw()\n\n# wrapper function for the server, allows the data\n# to be passed in\ndef create_server(data):\n  def f(input, output, session):\n  \n    @output(id=\"out\") # decorator to link this function to the \"out\" id in the UI\n    @render.plot # a decorator to indicate we want the plot renderer\n    def plot():\n      color = list(input.select()) # access the input value bound to the id \"select\"\n      sub = data[data['color'].isin(color)] # use it to create a subset\n      plot = create_plot(sub) # create our plot\n      return plot # and return it\n  return f\n\nserver = create_server(diamonds)\n\napp = App(frontend, server)", "type": "text"}]